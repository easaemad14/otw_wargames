I'm back, baby!

This is a fun problem that is much like the last. The main vulnerability in the
Vigenere cipher (and all crytanalysis problems in general) is the key. Since this
problem is the same as the last with the added step of repeated substitution, all
we need to do is do frequency analysis on each column (one through six).

If you look in the level4 directory, you'll see that there are two c++ files (I've
become a fan of c++ since working in the real-world): fa.cpp which is used to do
frequency analysis on a per-line basis, and deVig.cpp which allowed me to
"deVigenere" the files.

The first thing that I did was to split each set of six characters on their own
line in order to simplify this. Since I am a purist who uses Vim, this was easy
with the following command: :%s/.\{6}/&\r/g

This is the substitution command, which will take any character ('.') six wide, and
replace it with the same six characters ('&') and a new-line ('r'). The ending
'g' parameter just means do this globally.

After this is done, running my FA outputs the counts of each character for each
respective position in the string (this correlates to a column). Matching the
frequencies of each character to match the FA from the link I provided in the last
problem, you get the following translations with their respective characters:

Position 0: [J-ZA-J] [E-ZA-E] F
Position 1: [V-ZA-U] [E-ZA-D] R
Position 2: [I-ZA-H] [E-ZA-D] E
Position 3: [O-ZA-N] [E-ZA-D] K
Position 4: [I-ZA-H] [E-ZA-D] E
Position 5: [C-ZA-B] [E-ZA-D] Y

Using my deVigenere program, I entered the key of FREKEY and output the password
to pass.
